@page
@model GlobalPaymentFraudDetection.Pages.Dashboard.IndexModel
@{
    ViewData["Title"] = "Fraud Detection Dashboard";
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="page-header d-flex justify-content-between align-items-center">
                <div>
                    <h1>Fraud Detection Dashboard</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item active">Dashboard</li>
                        </ol>
                    </nav>
                </div>
                <div class="d-flex gap-2">
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown">
                            <i class="bi bi-download"></i> Export
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" onclick="exportToCSV(); return false;"><i class="bi bi-file-earmark-text"></i> Export as CSV</a></li>
                            <li><a class="dropdown-item" href="#" onclick="exportToPDF(); return false;"><i class="bi bi-file-earmark-pdf"></i> Export as PDF</a></li>
                        </ul>
                    </div>
                    <button class="btn btn-primary" onclick="location.reload()">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4 g-3">
        <div class="col-md-3 col-sm-6 fade-in">
            <div class="stat-card stat-card-primary">
                <h5 class="card-title">Total Transactions</h5>
                <h2 id="totalTransactions">0</h2>
                <p class="card-text">Last 24 Hours</p>
            </div>
        </div>
        <div class="col-md-3 col-sm-6 fade-in" style="animation-delay: 0.1s;">
            <div class="stat-card stat-card-success">
                <h5 class="card-title">Approved</h5>
                <h2 id="approvedTransactions">0</h2>
                <p class="card-text">Success Rate: <span id="successRate">0%</span></p>
            </div>
        </div>
        <div class="col-md-3 col-sm-6 fade-in" style="animation-delay: 0.2s;">
            <div class="stat-card stat-card-danger">
                <h5 class="card-title">Declined (Fraud)</h5>
                <h2 id="declinedTransactions">0</h2>
                <p class="card-text">Fraud Rate: <span id="fraudRate">0%</span></p>
            </div>
        </div>
        <div class="col-md-3 col-sm-6 fade-in" style="animation-delay: 0.3s;">
            <div class="stat-card stat-card-warning">
                <h5 class="card-title">Pending Review</h5>
                <h2 id="pendingReview">0</h2>
                <p class="card-text">Manual Review Required</p>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h5>Transaction Fraud Score Trend</h5>
                </div>
                <div class="card-body">
                    <canvas id="fraudTrendChart" height="80"></canvas>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5>Risk Distribution</h5>
                </div>
                <div class="card-body">
                    <canvas id="riskDistributionChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Real-Time Transaction Stream</h5>
                    <div class="d-flex align-items-center gap-2">
                        <span class="status-indicator online" id="statusIndicator"></span>
                        <span class="badge bg-success" id="connectionStatus">Connected</span>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="search-box">
                                <i class="bi bi-search"></i>
                                <input type="text" id="searchTransactions" class="form-control" placeholder="Search transactions by ID, user, or amount...">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex gap-2 justify-content-end">
                                <input type="date" id="dateFrom" class="form-control" style="max-width: 200px;" title="From Date">
                                <input type="date" id="dateTo" class="form-control" style="max-width: 200px;" title="To Date">
                            </div>
                        </div>
                    </div>
                    <div class="filter-pills mb-3">
                        <span class="filter-pill active" data-filter="all">All</span>
                        <span class="filter-pill" data-filter="APPROVED">Approved</span>
                        <span class="filter-pill" data-filter="DECLINED">Declined</span>
                        <span class="filter-pill" data-filter="PENDING">Pending</span>
                        <span class="filter-pill" data-filter="high-risk">High Risk</span>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-hover" id="transactionTable">
                            <thead>
                                <tr>
                                    <th>Time</th>
                                    <th>Transaction ID</th>
                                    <th>User ID</th>
                                    <th>Amount</th>
                                    <th>Gateway</th>
                                    <th>Fraud Score</th>
                                    <th>Decision</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="transactionTableBody">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>Active Fraud Alerts</h5>
                </div>
                <div class="card-body">
                    <div id="alertsContainer">
                        <p class="text-muted">No active alerts</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.31/jspdf.plugin.autotable.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/fraudhub")
            .withAutomaticReconnect()
            .build();

        let fraudTrendChart, riskDistributionChart;
        let transactionData = [];

        connection.on("ReceiveTransactionUpdate", function (transaction) {
            addTransactionToTable(transaction);
            updateStatistics();
        });

        connection.on("ReceiveFraudAlert", function (alert) {
            addAlertToUI(alert);
        });

        connection.on("ReceiveScoreUpdate", function (score) {
            updateScoreInTable(score);
            updateCharts(score);
        });

        connection.start().then(function () {
            document.getElementById("connectionStatus").textContent = "Connected";
            document.getElementById("connectionStatus").className = "badge bg-success";
        }).catch(function (err) {
            document.getElementById("connectionStatus").textContent = "Disconnected";
            document.getElementById("connectionStatus").className = "badge bg-danger";
            console.error(err.toString());
        });

        function addTransactionToTable(transaction) {
            const tbody = document.getElementById("transactionTableBody");
            const row = tbody.insertRow(0);
            row.id = `tx-${transaction.transactionId}`;
            
            row.innerHTML = `
                <td>${new Date(transaction.timestamp).toLocaleTimeString()}</td>
                <td>${transaction.transactionId.substring(0, 8)}...</td>
                <td>${transaction.userId.substring(0, 8)}...</td>
                <td>$${transaction.amount.toFixed(2)} ${transaction.currency}</td>
                <td><span class="badge bg-info">${transaction.paymentGateway}</span></td>
                <td><div class="spinner-border spinner-border-sm" role="status"></div></td>
                <td><span class="badge bg-secondary">Processing...</span></td>
                <td><button class="btn btn-sm btn-outline-primary" onclick="viewDetails('${transaction.transactionId}')">Details</button></td>
            `;

            transactionData.push(transaction);
            if (tbody.rows.length > 20) {
                tbody.deleteRow(20);
            }
        }

        function updateScoreInTable(score) {
            const row = document.getElementById(`tx-${score.transactionId}`);
            if (row) {
                const scoreCell = row.cells[5];
                const decisionCell = row.cells[6];
                
                const scorePercent = (score.fraudProbability * 100).toFixed(1);
                scoreCell.innerHTML = `<span class="badge ${score.isFraudulent ? 'bg-danger' : 'bg-success'}">${scorePercent}%</span>`;
                
                const decisionBadge = score.decision === 'APPROVED' ? 'bg-success' : 
                                    score.decision === 'DECLINED' ? 'bg-danger' : 'bg-warning';
                decisionCell.innerHTML = `<span class="badge ${decisionBadge}">${score.decision}</span>`;
            }
        }

        function addAlertToUI(alert) {
            const container = document.getElementById("alertsContainer");
            if (container.querySelector('.text-muted')) {
                container.innerHTML = '';
            }
            
            const severityClass = alert.severity === 'CRITICAL' ? 'danger' : 
                                alert.severity === 'HIGH' ? 'warning' : 'info';
            
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${severityClass} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                <h6 class="alert-heading">Alert: ${alert.alertType}</h6>
                <p>Transaction: ${alert.transactionId} | User: ${alert.userId} | Amount: $${alert.amount}</p>
                <p>Fraud Probability: ${(alert.fraudProbability * 100).toFixed(1)}%</p>
                <small>Reasons: ${alert.reasons.join(', ')}</small>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            container.insertBefore(alertDiv, container.firstChild);
        }

        function updateStatistics() {
            const total = transactionData.length;
            const approved = transactionData.filter(t => t.status === 'APPROVED').length;
            const declined = transactionData.filter(t => t.status === 'DECLINED').length;
            const pending = transactionData.filter(t => t.status === 'PENDING').length;

            document.getElementById('totalTransactions').textContent = total;
            document.getElementById('approvedTransactions').textContent = approved;
            document.getElementById('declinedTransactions').textContent = declined;
            document.getElementById('pendingReview').textContent = pending;

            if (total > 0) {
                document.getElementById('successRate').textContent = ((approved / total) * 100).toFixed(1) + '%';
                document.getElementById('fraudRate').textContent = ((declined / total) * 100).toFixed(1) + '%';
            }
        }

        let chartDataPoints = [];
        let riskCounts = { low: 0, medium: 0, high: 0, critical: 0 };

        function updateCharts(score) {
            const timestamp = new Date().toLocaleTimeString();
            chartDataPoints.push({ time: timestamp, score: score.fraudProbability });
            
            if (chartDataPoints.length > 20) {
                chartDataPoints.shift();
            }
            
            if (fraudTrendChart) {
                fraudTrendChart.data.labels = chartDataPoints.map(d => d.time);
                fraudTrendChart.data.datasets[0].data = chartDataPoints.map(d => d.score);
                fraudTrendChart.update();
            }
            
            if (score.fraudProbability < 0.3) riskCounts.low++;
            else if (score.fraudProbability < 0.6) riskCounts.medium++;
            else if (score.fraudProbability < 0.8) riskCounts.high++;
            else riskCounts.critical++;
            
            if (riskDistributionChart) {
                riskDistributionChart.data.datasets[0].data = [
                    riskCounts.low,
                    riskCounts.medium,
                    riskCounts.high,
                    riskCounts.critical
                ];
                riskDistributionChart.update();
            }
        }

        function viewDetails(transactionId) {
            window.location.href = `/Transactions/Details?id=${transactionId}`;
        }

        function exportToCSV() {
            const table = document.getElementById('transactionTable');
            const rows = table.querySelectorAll('tr');
            const csv = [];
            
            for (let i = 0; i < rows.length; i++) {
                const row = [], cols = rows[i].querySelectorAll('td, th');
                
                for (let j = 0; j < cols.length - 1; j++) {
                    let data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ');
                    data = data.replace(/"/g, '""');
                    row.push('"' + data + '"');
                }
                
                csv.push(row.join(','));
            }
            
            const csvFile = new Blob([csv.join('\n')], { type: 'text/csv' });
            const downloadLink = document.createElement('a');
            downloadLink.download = `fraud-transactions-${new Date().toISOString().split('T')[0]}.csv`;
            downloadLink.href = window.URL.createObjectURL(csvFile);
            downloadLink.style.display = 'none';
            document.body.appendChild(downloadLink);
            downloadLink.click();
            document.body.removeChild(downloadLink);
            showToast('CSV export completed successfully', 'success');
        }

        function exportToPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF('l', 'mm', 'a4');
            
            const pageWidth = doc.internal.pageSize.getWidth();
            
            doc.setFontSize(18);
            doc.setTextColor(79, 70, 229);
            doc.text('Fraud Detection Dashboard - Transaction Report', 14, 15);
            
            doc.setFontSize(10);
            doc.setTextColor(100);
            doc.text(`Generated: ${new Date().toLocaleString()}`, 14, 22);
            
            const stats = {
                total: document.getElementById('totalTransactions').textContent,
                approved: document.getElementById('approvedTransactions').textContent,
                declined: document.getElementById('declinedTransactions').textContent,
                pending: document.getElementById('pendingReview').textContent,
                successRate: document.getElementById('successRate').textContent,
                fraudRate: document.getElementById('fraudRate').textContent
            };
            
            doc.setFontSize(11);
            doc.setTextColor(0);
            doc.text(`Summary: Total: ${stats.total} | Approved: ${stats.approved} (${stats.successRate}) | Declined: ${stats.declined} (${stats.fraudRate}) | Pending: ${stats.pending}`, 14, 29);
            
            const table = document.getElementById('transactionTable');
            const headers = [];
            const headerCells = table.querySelectorAll('thead th');
            for (let i = 0; i < headerCells.length - 1; i++) {
                headers.push(headerCells[i].innerText);
            }
            
            const rows = [];
            const bodyRows = table.querySelectorAll('tbody tr');
            bodyRows.forEach(row => {
                if (row.style.display !== 'none') {
                    const rowData = [];
                    const cells = row.querySelectorAll('td');
                    for (let i = 0; i < cells.length - 1; i++) {
                        rowData.push(cells[i].innerText.trim());
                    }
                    rows.push(rowData);
                }
            });
            
            doc.autoTable({
                head: [headers],
                body: rows,
                startY: 35,
                theme: 'striped',
                headStyles: { fillColor: [79, 70, 229] },
                styles: { fontSize: 8, cellPadding: 2 },
                margin: { left: 14, right: 14 }
            });
            
            const pageCount = doc.internal.getNumberOfPages();
            for (let i = 1; i <= pageCount; i++) {
                doc.setPage(i);
                doc.setFontSize(8);
                doc.setTextColor(150);
                doc.text(
                    `Page ${i} of ${pageCount}`,
                    pageWidth / 2,
                    doc.internal.pageSize.getHeight() - 10,
                    { align: 'center' }
                );
            }
            
            doc.save(`fraud-transactions-${new Date().toISOString().split('T')[0]}.pdf`);
            showToast('PDF export completed successfully', 'success');
        }

        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchTransactions');
            const dateFrom = document.getElementById('dateFrom');
            const dateTo = document.getElementById('dateTo');
            const filterPills = document.querySelectorAll('.filter-pill');
            
            let currentFilter = 'all';
            
            if (searchInput) {
                searchInput.addEventListener('input', filterTransactions);
            }
            
            if (dateFrom) {
                dateFrom.addEventListener('change', filterTransactions);
            }
            
            if (dateTo) {
                dateTo.addEventListener('change', filterTransactions);
            }
            
            filterPills.forEach(pill => {
                pill.addEventListener('click', function() {
                    filterPills.forEach(p => p.classList.remove('active'));
                    this.classList.add('active');
                    currentFilter = this.dataset.filter;
                    filterTransactions();
                });
            });
            
            function filterTransactions() {
                const searchTerm = searchInput?.value.toLowerCase() || '';
                const fromDate = dateFrom?.value ? new Date(dateFrom.value) : null;
                const toDate = dateTo?.value ? new Date(dateTo.value) : null;
                
                const rows = document.querySelectorAll('#transactionTableBody tr');
                let visibleCount = 0;
                
                rows.forEach(row => {
                    const text = row.textContent.toLowerCase();
                    const matchesSearch = !searchTerm || text.includes(searchTerm);
                    
                    const decision = row.querySelector('.badge.bg-success, .badge.bg-danger, .badge.bg-warning');
                    const decisionText = decision?.textContent.trim();
                    let matchesFilter = currentFilter === 'all';
                    
                    if (currentFilter === 'APPROVED') matchesFilter = decisionText === 'APPROVED';
                    else if (currentFilter === 'DECLINED') matchesFilter = decisionText === 'DECLINED';
                    else if (currentFilter === 'PENDING') matchesFilter = decisionText === 'PENDING' || decisionText === 'Processing...';
                    else if (currentFilter === 'high-risk') {
                        const scoreText = row.cells[5]?.textContent;
                        const score = parseFloat(scoreText);
                        matchesFilter = score > 70;
                    }
                    
                    if (matchesSearch && matchesFilter) {
                        row.style.display = '';
                        visibleCount++;
                    } else {
                        row.style.display = 'none';
                    }
                });
            }
        });

        window.addEventListener('load', function() {
            const ctx1 = document.getElementById('fraudTrendChart').getContext('2d');
            fraudTrendChart = new Chart(ctx1, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Fraud Score',
                        data: [],
                        borderColor: 'rgb(220, 53, 69)',
                        backgroundColor: 'rgba(220, 53, 69, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true
                }
            });

            const ctx2 = document.getElementById('riskDistributionChart').getContext('2d');
            riskDistributionChart = new Chart(ctx2, {
                type: 'doughnut',
                data: {
                    labels: ['Low Risk', 'Medium Risk', 'High Risk', 'Critical'],
                    datasets: [{
                        data: [0, 0, 0, 0],
                        backgroundColor: [
                            'rgb(25, 135, 84)',
                            'rgb(255, 193, 7)',
                            'rgb(255, 109, 0)',
                            'rgb(220, 53, 69)'
                        ]
                    }]
                }
            });
        });
    </script>
}
